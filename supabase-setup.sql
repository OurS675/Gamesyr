-- Configuración completa de Supabase para GamesYr
-- Ejecuta este SQL en el editor SQL de Supabase

-- 1. Crear tabla users
create table if not exists public.users (
  id uuid primary key default gen_random_uuid(),
  auth_user_id uuid unique,
  username text unique not null,
  email text unique not null,
  role text not null default 'user',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- 2. Crear tabla games
create table if not exists public.games (
  id bigint generated by default as identity primary key,
  name text not null,
  links jsonb default '[]'::jsonb,
  image text default '',
  images text[] default '{}',
  description text default '',
  notes text default '',
  genre text default ''
);

-- 3. Crear índice para búsqueda
create index if not exists idx_games_name on public.games using gin (to_tsvector('spanish', name));

-- 4. Deshabilitar RLS para desarrollo (más simple)
alter table public.users disable row level security;
alter table public.games disable row level security;

-- 5. Función helper para verificar admin
create or replace function public.is_admin() returns boolean language sql security definer set search_path = public as $$
  select exists (
    select 1 from public.users where auth_user_id = auth.uid() and role = 'admin'
  );
$$;

-- 6. Trigger para crear perfil automáticamente al registrarse
create or replace function public.handle_new_user() returns trigger as $$
begin
  insert into public.users (auth_user_id, username, email, role)
  values (
    new.id, 
    split_part(new.email, '@', 1), 
    new.email, 
    'user'
  )
  on conflict (auth_user_id) do nothing;
  return new;
end;
$$ language plpgsql security definer;

-- Crear trigger si no existe
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute function public.handle_new_user();

-- 7. Crear usuario admin de ejemplo (opcional)
-- Reemplaza 'admin@ejemplo.com' con tu email
insert into public.users (auth_user_id, username, email, role)
select 
  id, 
  'admin', 
  'admin@ejemplo.com', 
  'admin'
from auth.users 
where email = 'admin@ejemplo.com'
on conflict (auth_user_id) do update set role = 'admin';

-- 8. Verificar configuración
select 'Configuración completada' as status;
select count(*) as total_users from public.users;
select count(*) as total_games from public.games;

